{"name":"Tnt4j-log4j12","tagline":"Log4J 1.2  Appender for TNT4J","body":"# tnt4j-log4j12\r\nLog4J 1.2  Appender for TNT4J\r\n\r\n### LOG4J Appender\r\nAll LOG4J messages can be routed to TNt4J event sinks via `TNT4JAppender` for Log4J, \r\nwhich allows developers to send event messages to TNT4J.\r\n\r\nDevelopers may also enrich event messages and pass context to TNT4J using hash tag enrichment scheme.\r\nHash tags are used to decorate event messages with important meta data about each log message. \r\nThis meta data is used to generate TNT4J tracking events:\r\n```java\r\nlogger.info(\"Starting a tnt4j activity #beg=Test, #app=\" + Log4JTest.class.getName());\r\nlogger.warn(\"First log message #app=\" + Log4JTest.class.getName() + \", #msg='1 Test warning message'\");\r\nlogger.error(\"Second log message #app=\" + Log4JTest.class.getName() + \", #msg='2 Test error message'\", new Exception(\"test exception\"));\r\nlogger.info(\"Ending a tnt4j activity #end=Test, #app=\" + Log4JTest.class.getName() + \" #%i/order-no=\" + orderNo  + \" #%d:currency/amount=\" + amount);\r\n```\r\nAbove example groups messages between first and last into a related logical collection called `Activity`. Activity is a collection of logically related events/messages. Hash tags `#beg`, `#end` are used to demarcate activity boundaries. This method also supports nested activities.\r\n\r\nUser defined fields can be reported using `#[data-type][:value-type]/your-metric-name=your-value` convention (e.g. `#%i/order-no=62627` or `#%d:currency/amount=50.45`). \r\n`TNT4JAppender` supports the following optional `data-type` qualifiers:\r\n```\r\n\t%i/ -- integer\r\n\t%l/ -- long\r\n\t%d/ -- double\r\n\t%f/ -- float\r\n\t%b/ -- boolean\r\n\t%n/ -- number\r\n\t%s/ -- string\r\n```\r\nAll `value-type` qualifiers are defined in `com.nastel.jkool.tnt4j.core.ValueTypes`. Examples:\r\n```\r\n\tcurrency \t-- generic currency\r\n\tflag \t\t-- boolean flag\r\n\tage \t\t-- age in time units\r\n\tguid \t\t-- globally unique identifier\r\n\tguage\t\t-- numeric gauge\r\n\tcounter\t\t-- numeric counter\r\n\tpercent\t\t-- percent\r\n\ttimestamp\t-- timestamp\r\n\taddr \t\t-- generic address\r\n```\r\nNot specifying a qualifier defaults to auto detection of type by `TNT4JAppender`. \r\nFirst `number` qualifier is tested and defaults to `string` if the test fails (e.g. `#order-no=62627`).\r\nUser defined fields are reported as a TNT4J snapshot with `Log4j` category and snapshot name set to \r\nactivity name set by `#beg`, `#end`, `#opn` tags.\r\n\r\nBelow is a sample log4j appender configuration:\r\n```\r\n### Default TNT4J Appender configuration\r\nlog4j.appender.tnt4j=com.nastel.jkool.tnt4j.logger.log4j.TNT4JAppender\r\nlog4j.appender.tnt4j.SourceName=com.log4j.Test\r\nlog4j.appender.tnt4j.SourceType=APPL\r\nlog4j.appender.tnt4j.MetricsOnException=true\r\nlog4j.appender.tnt4j.MetricsFrequency=60\r\nlog4j.appender.tnt4j.layout=org.apache.log4j.PatternLayout\r\nlog4j.appender.tnt4j.layout.ConversionPattern=%d{ABSOLUTE} %-5p [%c{1}] %m%n\r\n```\r\nRunning Samples\r\n===============================================\r\n* Simple TNT4J Sample application (`com.nastel.jkool.tnt4j.examples.TNT4JTest`):\r\n```java\t\r\njava -javaagent:tnt4j-api.jar -Dtnt4j.config=config/tnt4j.properties -Dtnt4j.token.repository=config/tnt4j-tokens.properties  -Dtnt4j.dump.on.vm.shutdown=true -Dtnt4j.dump.provider.default=true -Dtnt4j.formatter.json.newline=true -classpath tnt4j-api-final-all.jar com.nastel.jkool.tnt4j.examples.TNT4JTest com.myco.TestApp MYSERVER \"Test log message\" correlator1 \"TestCommand\"  TestLocation\r\n```\r\n<b>Command line arguments:</b>\r\n* `-javaagent:tnt4j-api.jar` command line option is required by `ObjectDumpProvider` to calculate object deep and shallow memory sizes. Use this only if your application makes use of `ObjectDumpProvider` to dump object state.\r\n* `-Dtnt4j.dump.on.vm.shutdown=true` java property allows application state dumps generated automatically upon VM shutdown.\r\n* `-Dtnt4j.dump.provider.default=true` java property registers all default dump providers (memory, stack, logging stats).\r\n* `-Dtnt4j.formatter.json.newline=true` java property directs `JSONFormatter` to append new line when formatting log entries.\r\n\r\nSee `<timestamp>.log` and `<vmid>.dump` file for output produced by `com.nastel.jkool.tnt4j.examples.TNT4JTest`.\r\nSee `config/tnt4j.properties` for TNT4J configuration: factories, formatters, listeners, etc. See Wiki for more information.\r\n\r\nHow to Build tnt4j-log4j12\r\n=========================================\r\nRequirements\r\n* JDK 1.7+\r\n* ANT (http://ant.apache.org/)\r\n\r\nTNT4J-LOG4J12 depends on the following external packages:\r\n* TNT4J-API (http://nastel.github.io/TNT4J/)\r\n* Apache Log4J 1.2.17 (http://logging.apache.org/log4j/1.2/)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}